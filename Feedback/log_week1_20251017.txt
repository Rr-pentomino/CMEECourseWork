======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Ahmet Esmer

Processing week 1

Your current Git repo size is about 1.82 MiB on disk

Found directories: .git, week1, week2, Feedback, week3
Found files: .gitignore, .gitmodules, README.md, temporary.tmp, .DS_Store

Processing week 1: week1

Found 8 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: csvtospace.sh

Contents:

**********
#!/bin/sh
# Author: Ahmet Selim Esmer ase225@ic.ac.uk
# Script: cvstospace.sh
# Description: substitute the commas in the files with space
#
# Saves the output into a .csv file
# Arguments: 1 -> comma delimited file
# Date: Oct 2025


if [[ -e "$1" ]]; then

echo "Creating a space delimited version of $1 ..."

cat "$1" | tr -s "," " " > "${1%.csv}_space.txt"

echo "Done!"

exit

else 

echo "Please provide a valid file" 

exit

fi 
**********

Output (first 500 chars):

**********
Please provide a valid file

**********
No errors.
======================================================================
Script: tiff2png.sh

Contents:

**********
#!/bin/bash

for f in *.tif;
do
echo "Converting $f";
magick "$f" "$(basename "$f" .tif).png";
done
**********

Output (first 500 chars):

**********
Converting *.tif

**********
Errors:
**********
tiff2png.sh: line 6: magick: command not found

**********
======================================================================
Script: Countlines.sh

Contents:

**********
#!/bin/bash

if [[ -e "$1" ]]; then 

NumLines=`wc -l < $1`
echo
echo "The file $1 has $NumLines lines"
echo
exit

else
echo " Please provide a valid file"
exit
fi
**********

Output (first 500 chars):

**********
 Please provide a valid file

**********
No errors.
======================================================================
Script: boilerplate.sh

Contents:

**********
#!/bin/sh 
# Author: Ahmet Selim Esmer. ase225@ic.ac.uk
# Script: boilersplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
#Date: Oct 2025

echo -e "\nThis is a shell script! \n" 

#exit


**********

Output (first 500 chars):

**********

This is a shell script! 


**********
No errors.
======================================================================
Script: ConcatenateTwoFiles.sh

Contents:

**********
#!/bin/bash

if [[ -f "$1" && -f "$2" ]]; then 

cat "$1" > "$3"
cat "$2" >> "$3"

echo "Merged file is"
cat "$3"

exit

else 

echo " Please provide 2 existing files to concatenate "

exit

fi
**********

Output (first 500 chars):

**********
 Please provide 2 existing files to concatenate 

**********
No errors.
======================================================================
Script: tabtocsv.sh

Contents:

**********
#!/bin/sh
# Author: Ahmet Selim Esmer ase225@ic.ac.uk
# Script: tabtocvs.sh
# Description: substitue the tabs in the files with commas
#
# Saves the output into a .cvs file 
# Arguments: 1 -> tab delimited file 
# Date: Oct 2025

echo "Creating a comma delimited version of $1 ..."

if [[ -e "$1" ]]; then 
cat $1 | tr -s "\t" "," >> $1.csv
echo "Done!"
exit

else 

echo " Please provide a valid file "
exit

fi
**********

Output (first 500 chars):

**********
Creating a comma delimited version of  ...
 Please provide a valid file 

**********
No errors.
======================================================================
Script: MyExampleScript.sh

Contents:

**********
#!/bin/sh

MSG1="Hello"
MSG2=$USER 
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo

echo "Remove excess    spaces." | tr -s " "



**********

Output (first 500 chars):

**********
Hello mhasoba
Hello mhasoba

Remove excess spaces.

**********
No errors.
======================================================================
Script: variables.sh

Contents:

**********
#!/bin/sh

## Illustrates the use of variables

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned variables; Explicit declaration

MY_VAR='some string'
echo 'the current value of the variable is:' $MY_VAR
echo 
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is.' $MY_VAR

# Assigned Variables; Reading multiple values from user input

echo 'Enter two numbers separated by space'
read a b 
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

MY_SUM=$(expr $a + $b)
echo $MY_SUM

**********

Output (first 500 chars):

**********
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is.
Enter two numbers separated by space

you entered and ; Their sum is:


**********
Errors:
**********
expr: syntax error: missing argument after ‘+’

**********

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 11
Scripts successful: 9
Scripts with errors: 2
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

